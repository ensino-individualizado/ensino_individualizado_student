/**
 * This class is generated by jOOQ
 */
package DAO.mysql.generatedclasses.tables;


import DAO.mysql.generatedclasses.Ensinoindividualizado;
import DAO.mysql.generatedclasses.Keys;
import DAO.mysql.generatedclasses.tables.records.AlternativaRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Alternativa extends TableImpl<AlternativaRecord> {

	private static final long serialVersionUID = 1505311338;

	/**
	 * The reference instance of <code>ensinoindividualizado.alternativa</code>
	 */
	public static final Alternativa ALTERNATIVA = new Alternativa();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AlternativaRecord> getRecordType() {
		return AlternativaRecord.class;
	}

	/**
	 * The column <code>ensinoindividualizado.alternativa.idalternativa</code>.
	 */
	public final TableField<AlternativaRecord, Integer> IDALTERNATIVA = createField("idalternativa", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.idtentativa</code>.
	 */
	public final TableField<AlternativaRecord, Integer> IDTENTATIVA = createField("idtentativa", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.palavra_idpalavra</code>.
	 */
	public final TableField<AlternativaRecord, Integer> PALAVRA_IDPALAVRA = createField("palavra_idpalavra", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.palavra_idcategoria</code>.
	 */
	public final TableField<AlternativaRecord, Integer> PALAVRA_IDCATEGORIA = createField("palavra_idcategoria", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.palavra_idaudio</code>.
	 */
	public final TableField<AlternativaRecord, Integer> PALAVRA_IDAUDIO = createField("palavra_idaudio", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.palavra_idimagem</code>.
	 */
	public final TableField<AlternativaRecord, Integer> PALAVRA_IDIMAGEM = createField("palavra_idimagem", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>ensinoindividualizado.alternativa.resposta</code>. A resposta é considerada a correta caso este campo seja igual a true.
	 */
	public final TableField<AlternativaRecord, Byte> RESPOSTA = createField("resposta", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "A resposta é considerada a correta caso este campo seja igual a true.");

	/**
	 * Create a <code>ensinoindividualizado.alternativa</code> table reference
	 */
	public Alternativa() {
		this("alternativa", null);
	}

	/**
	 * Create an aliased <code>ensinoindividualizado.alternativa</code> table reference
	 */
	public Alternativa(String alias) {
		this(alias, ALTERNATIVA);
	}

	private Alternativa(String alias, Table<AlternativaRecord> aliased) {
		this(alias, aliased, null);
	}

	private Alternativa(String alias, Table<AlternativaRecord> aliased, Field<?>[] parameters) {
		super(alias, Ensinoindividualizado.ENSINOINDIVIDUALIZADO, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AlternativaRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ALTERNATIVA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AlternativaRecord> getPrimaryKey() {
		return Keys.KEY_ALTERNATIVA_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AlternativaRecord>> getKeys() {
		return Arrays.<UniqueKey<AlternativaRecord>>asList(Keys.KEY_ALTERNATIVA_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AlternativaRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AlternativaRecord, ?>>asList(Keys.FK_ALTERNATIVA_TENTATIVA1, Keys.FK_ALTERNATIVA_PALAVRA1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Alternativa as(String alias) {
		return new Alternativa(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Alternativa rename(String name) {
		return new Alternativa(name, null);
	}
}
